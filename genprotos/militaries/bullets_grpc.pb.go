// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: bullets.proto

package militaries

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BulletService_Create_FullMethodName = "/bullet.BulletService/Create"
	BulletService_Update_FullMethodName = "/bullet.BulletService/Update"
	BulletService_Delete_FullMethodName = "/bullet.BulletService/Delete"
	BulletService_Get_FullMethodName    = "/bullet.BulletService/Get"
	BulletService_GetAll_FullMethodName = "/bullet.BulletService/GetAll"
	BulletService_Add_FullMethodName    = "/bullet.BulletService/Add"
	BulletService_Sub_FullMethodName    = "/bullet.BulletService/Sub"
)

// BulletServiceClient is the client API for BulletService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BulletServiceClient interface {
	Create(ctx context.Context, in *BulletReq, opts ...grpc.CallOption) (*Void, error)
	Update(ctx context.Context, in *Bullet, opts ...grpc.CallOption) (*Void, error)
	Delete(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error)
	Get(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Bullet, error)
	GetAll(ctx context.Context, in *BulletReq, opts ...grpc.CallOption) (*AllBullets, error)
	Add(ctx context.Context, in *BulletAddSub, opts ...grpc.CallOption) (*Void, error)
	Sub(ctx context.Context, in *BulletAddSub, opts ...grpc.CallOption) (*Void, error)
}

type bulletServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBulletServiceClient(cc grpc.ClientConnInterface) BulletServiceClient {
	return &bulletServiceClient{cc}
}

func (c *bulletServiceClient) Create(ctx context.Context, in *BulletReq, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, BulletService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bulletServiceClient) Update(ctx context.Context, in *Bullet, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, BulletService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bulletServiceClient) Delete(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, BulletService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bulletServiceClient) Get(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Bullet, error) {
	out := new(Bullet)
	err := c.cc.Invoke(ctx, BulletService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bulletServiceClient) GetAll(ctx context.Context, in *BulletReq, opts ...grpc.CallOption) (*AllBullets, error) {
	out := new(AllBullets)
	err := c.cc.Invoke(ctx, BulletService_GetAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bulletServiceClient) Add(ctx context.Context, in *BulletAddSub, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, BulletService_Add_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bulletServiceClient) Sub(ctx context.Context, in *BulletAddSub, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, BulletService_Sub_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BulletServiceServer is the server API for BulletService service.
// All implementations must embed UnimplementedBulletServiceServer
// for forward compatibility
type BulletServiceServer interface {
	Create(context.Context, *BulletReq) (*Void, error)
	Update(context.Context, *Bullet) (*Void, error)
	Delete(context.Context, *ById) (*Void, error)
	Get(context.Context, *ById) (*Bullet, error)
	GetAll(context.Context, *BulletReq) (*AllBullets, error)
	Add(context.Context, *BulletAddSub) (*Void, error)
	Sub(context.Context, *BulletAddSub) (*Void, error)
	mustEmbedUnimplementedBulletServiceServer()
}

// UnimplementedBulletServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBulletServiceServer struct {
}

func (UnimplementedBulletServiceServer) Create(context.Context, *BulletReq) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedBulletServiceServer) Update(context.Context, *Bullet) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedBulletServiceServer) Delete(context.Context, *ById) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedBulletServiceServer) Get(context.Context, *ById) (*Bullet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedBulletServiceServer) GetAll(context.Context, *BulletReq) (*AllBullets, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedBulletServiceServer) Add(context.Context, *BulletAddSub) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedBulletServiceServer) Sub(context.Context, *BulletAddSub) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sub not implemented")
}
func (UnimplementedBulletServiceServer) mustEmbedUnimplementedBulletServiceServer() {}

// UnsafeBulletServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BulletServiceServer will
// result in compilation errors.
type UnsafeBulletServiceServer interface {
	mustEmbedUnimplementedBulletServiceServer()
}

func RegisterBulletServiceServer(s grpc.ServiceRegistrar, srv BulletServiceServer) {
	s.RegisterService(&BulletService_ServiceDesc, srv)
}

func _BulletService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulletReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BulletServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BulletService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BulletServiceServer).Create(ctx, req.(*BulletReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BulletService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Bullet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BulletServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BulletService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BulletServiceServer).Update(ctx, req.(*Bullet))
	}
	return interceptor(ctx, in, info, handler)
}

func _BulletService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BulletServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BulletService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BulletServiceServer).Delete(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _BulletService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BulletServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BulletService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BulletServiceServer).Get(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _BulletService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulletReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BulletServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BulletService_GetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BulletServiceServer).GetAll(ctx, req.(*BulletReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BulletService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulletAddSub)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BulletServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BulletService_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BulletServiceServer).Add(ctx, req.(*BulletAddSub))
	}
	return interceptor(ctx, in, info, handler)
}

func _BulletService_Sub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulletAddSub)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BulletServiceServer).Sub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BulletService_Sub_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BulletServiceServer).Sub(ctx, req.(*BulletAddSub))
	}
	return interceptor(ctx, in, info, handler)
}

// BulletService_ServiceDesc is the grpc.ServiceDesc for BulletService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BulletService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bullet.BulletService",
	HandlerType: (*BulletServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _BulletService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _BulletService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _BulletService_Delete_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _BulletService_Get_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _BulletService_GetAll_Handler,
		},
		{
			MethodName: "Add",
			Handler:    _BulletService_Add_Handler,
		},
		{
			MethodName: "Sub",
			Handler:    _BulletService_Sub_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bullets.proto",
}
