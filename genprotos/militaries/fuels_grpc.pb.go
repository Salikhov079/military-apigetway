// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: fuels.proto

package militaries

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FuelServiceClient is the client API for FuelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FuelServiceClient interface {
	Create(ctx context.Context, in *FuelReq, opts ...grpc.CallOption) (*Void, error)
	Update(ctx context.Context, in *Fuel, opts ...grpc.CallOption) (*Void, error)
	Delete(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error)
	Get(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Fuel, error)
	GetAll(ctx context.Context, in *FuelReq, opts ...grpc.CallOption) (*Fuel, error)
}

type fuelServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFuelServiceClient(cc grpc.ClientConnInterface) FuelServiceClient {
	return &fuelServiceClient{cc}
}

func (c *fuelServiceClient) Create(ctx context.Context, in *FuelReq, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/fuel.FuelService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fuelServiceClient) Update(ctx context.Context, in *Fuel, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/fuel.FuelService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fuelServiceClient) Delete(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/fuel.FuelService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fuelServiceClient) Get(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Fuel, error) {
	out := new(Fuel)
	err := c.cc.Invoke(ctx, "/fuel.FuelService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fuelServiceClient) GetAll(ctx context.Context, in *FuelReq, opts ...grpc.CallOption) (*Fuel, error) {
	out := new(Fuel)
	err := c.cc.Invoke(ctx, "/fuel.FuelService/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FuelServiceServer is the server API for FuelService service.
// All implementations must embed UnimplementedFuelServiceServer
// for forward compatibility
type FuelServiceServer interface {
	Create(context.Context, *FuelReq) (*Void, error)
	Update(context.Context, *Fuel) (*Void, error)
	Delete(context.Context, *ById) (*Void, error)
	Get(context.Context, *ById) (*Fuel, error)
	GetAll(context.Context, *FuelReq) (*Fuel, error)
	mustEmbedUnimplementedFuelServiceServer()
}

// UnimplementedFuelServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFuelServiceServer struct {
}

func (UnimplementedFuelServiceServer) Create(context.Context, *FuelReq) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedFuelServiceServer) Update(context.Context, *Fuel) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedFuelServiceServer) Delete(context.Context, *ById) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedFuelServiceServer) Get(context.Context, *ById) (*Fuel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedFuelServiceServer) GetAll(context.Context, *FuelReq) (*Fuel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedFuelServiceServer) mustEmbedUnimplementedFuelServiceServer() {}

// UnsafeFuelServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FuelServiceServer will
// result in compilation errors.
type UnsafeFuelServiceServer interface {
	mustEmbedUnimplementedFuelServiceServer()
}

func RegisterFuelServiceServer(s grpc.ServiceRegistrar, srv FuelServiceServer) {
	s.RegisterService(&FuelService_ServiceDesc, srv)
}

func _FuelService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FuelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FuelServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fuel.FuelService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FuelServiceServer).Create(ctx, req.(*FuelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FuelService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Fuel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FuelServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fuel.FuelService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FuelServiceServer).Update(ctx, req.(*Fuel))
	}
	return interceptor(ctx, in, info, handler)
}

func _FuelService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FuelServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fuel.FuelService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FuelServiceServer).Delete(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _FuelService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FuelServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fuel.FuelService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FuelServiceServer).Get(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _FuelService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FuelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FuelServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fuel.FuelService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FuelServiceServer).GetAll(ctx, req.(*FuelReq))
	}
	return interceptor(ctx, in, info, handler)
}

// FuelService_ServiceDesc is the grpc.ServiceDesc for FuelService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FuelService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fuel.FuelService",
	HandlerType: (*FuelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _FuelService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _FuelService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _FuelService_Delete_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _FuelService_Get_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _FuelService_GetAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fuels.proto",
}
