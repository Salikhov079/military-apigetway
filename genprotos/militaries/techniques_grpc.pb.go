// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: techniques.proto

package militaries

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TechniqueService_Create_FullMethodName = "/techniques.TechniqueService/Create"
	TechniqueService_Update_FullMethodName = "/techniques.TechniqueService/Update"
	TechniqueService_Delete_FullMethodName = "/techniques.TechniqueService/Delete"
	TechniqueService_Get_FullMethodName    = "/techniques.TechniqueService/Get"
	TechniqueService_GetAll_FullMethodName = "/techniques.TechniqueService/GetAll"
	TechniqueService_Add_FullMethodName    = "/techniques.TechniqueService/Add"
	TechniqueService_Sub_FullMethodName    = "/techniques.TechniqueService/Sub"
)

// TechniqueServiceClient is the client API for TechniqueService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TechniqueServiceClient interface {
	Create(ctx context.Context, in *TechniqueReq, opts ...grpc.CallOption) (*Void, error)
	Update(ctx context.Context, in *Technique, opts ...grpc.CallOption) (*Void, error)
	Delete(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error)
	Get(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Technique, error)
	GetAll(ctx context.Context, in *TechniqueReq, opts ...grpc.CallOption) (*AllTechnique, error)
	Add(ctx context.Context, in *TechniqueAddSub, opts ...grpc.CallOption) (*Void, error)
	Sub(ctx context.Context, in *TechniqueAddSub, opts ...grpc.CallOption) (*Void, error)
}

type techniqueServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTechniqueServiceClient(cc grpc.ClientConnInterface) TechniqueServiceClient {
	return &techniqueServiceClient{cc}
}

func (c *techniqueServiceClient) Create(ctx context.Context, in *TechniqueReq, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, TechniqueService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *techniqueServiceClient) Update(ctx context.Context, in *Technique, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, TechniqueService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *techniqueServiceClient) Delete(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, TechniqueService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *techniqueServiceClient) Get(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Technique, error) {
	out := new(Technique)
	err := c.cc.Invoke(ctx, TechniqueService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *techniqueServiceClient) GetAll(ctx context.Context, in *TechniqueReq, opts ...grpc.CallOption) (*AllTechnique, error) {
	out := new(AllTechnique)
	err := c.cc.Invoke(ctx, TechniqueService_GetAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *techniqueServiceClient) Add(ctx context.Context, in *TechniqueAddSub, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, TechniqueService_Add_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *techniqueServiceClient) Sub(ctx context.Context, in *TechniqueAddSub, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, TechniqueService_Sub_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TechniqueServiceServer is the server API for TechniqueService service.
// All implementations must embed UnimplementedTechniqueServiceServer
// for forward compatibility
type TechniqueServiceServer interface {
	Create(context.Context, *TechniqueReq) (*Void, error)
	Update(context.Context, *Technique) (*Void, error)
	Delete(context.Context, *ById) (*Void, error)
	Get(context.Context, *ById) (*Technique, error)
	GetAll(context.Context, *TechniqueReq) (*AllTechnique, error)
	Add(context.Context, *TechniqueAddSub) (*Void, error)
	Sub(context.Context, *TechniqueAddSub) (*Void, error)
	mustEmbedUnimplementedTechniqueServiceServer()
}

// UnimplementedTechniqueServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTechniqueServiceServer struct {
}

func (UnimplementedTechniqueServiceServer) Create(context.Context, *TechniqueReq) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedTechniqueServiceServer) Update(context.Context, *Technique) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedTechniqueServiceServer) Delete(context.Context, *ById) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedTechniqueServiceServer) Get(context.Context, *ById) (*Technique, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedTechniqueServiceServer) GetAll(context.Context, *TechniqueReq) (*AllTechnique, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedTechniqueServiceServer) Add(context.Context, *TechniqueAddSub) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedTechniqueServiceServer) Sub(context.Context, *TechniqueAddSub) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sub not implemented")
}
func (UnimplementedTechniqueServiceServer) mustEmbedUnimplementedTechniqueServiceServer() {}

// UnsafeTechniqueServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TechniqueServiceServer will
// result in compilation errors.
type UnsafeTechniqueServiceServer interface {
	mustEmbedUnimplementedTechniqueServiceServer()
}

func RegisterTechniqueServiceServer(s grpc.ServiceRegistrar, srv TechniqueServiceServer) {
	s.RegisterService(&TechniqueService_ServiceDesc, srv)
}

func _TechniqueService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TechniqueReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TechniqueServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TechniqueService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TechniqueServiceServer).Create(ctx, req.(*TechniqueReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TechniqueService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Technique)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TechniqueServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TechniqueService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TechniqueServiceServer).Update(ctx, req.(*Technique))
	}
	return interceptor(ctx, in, info, handler)
}

func _TechniqueService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TechniqueServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TechniqueService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TechniqueServiceServer).Delete(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _TechniqueService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TechniqueServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TechniqueService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TechniqueServiceServer).Get(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _TechniqueService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TechniqueReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TechniqueServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TechniqueService_GetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TechniqueServiceServer).GetAll(ctx, req.(*TechniqueReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TechniqueService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TechniqueAddSub)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TechniqueServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TechniqueService_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TechniqueServiceServer).Add(ctx, req.(*TechniqueAddSub))
	}
	return interceptor(ctx, in, info, handler)
}

func _TechniqueService_Sub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TechniqueAddSub)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TechniqueServiceServer).Sub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TechniqueService_Sub_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TechniqueServiceServer).Sub(ctx, req.(*TechniqueAddSub))
	}
	return interceptor(ctx, in, info, handler)
}

// TechniqueService_ServiceDesc is the grpc.ServiceDesc for TechniqueService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TechniqueService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "techniques.TechniqueService",
	HandlerType: (*TechniqueServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _TechniqueService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _TechniqueService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _TechniqueService_Delete_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _TechniqueService_Get_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _TechniqueService_GetAll_Handler,
		},
		{
			MethodName: "Add",
			Handler:    _TechniqueService_Add_Handler,
		},
		{
			MethodName: "Sub",
			Handler:    _TechniqueService_Sub_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "techniques.proto",
}
