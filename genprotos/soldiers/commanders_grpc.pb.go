// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: commanders.proto

package soldiers

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CommanderServiceClient is the client API for CommanderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommanderServiceClient interface {
	Create(ctx context.Context, in *CommanderReq, opts ...grpc.CallOption) (*Void, error)
	Update(ctx context.Context, in *Commander, opts ...grpc.CallOption) (*Void, error)
	Delete(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error)
	Get(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Commander, error)
	GetAll(ctx context.Context, in *CommanderReq, opts ...grpc.CallOption) (*AllCommanders, error)
}

type commanderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCommanderServiceClient(cc grpc.ClientConnInterface) CommanderServiceClient {
	return &commanderServiceClient{cc}
}

func (c *commanderServiceClient) Create(ctx context.Context, in *CommanderReq, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/commanders.CommanderService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commanderServiceClient) Update(ctx context.Context, in *Commander, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/commanders.CommanderService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commanderServiceClient) Delete(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/commanders.CommanderService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commanderServiceClient) Get(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Commander, error) {
	out := new(Commander)
	err := c.cc.Invoke(ctx, "/commanders.CommanderService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commanderServiceClient) GetAll(ctx context.Context, in *CommanderReq, opts ...grpc.CallOption) (*AllCommanders, error) {
	out := new(AllCommanders)
	err := c.cc.Invoke(ctx, "/commanders.CommanderService/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommanderServiceServer is the server API for CommanderService service.
// All implementations must embed UnimplementedCommanderServiceServer
// for forward compatibility
type CommanderServiceServer interface {
	Create(context.Context, *CommanderReq) (*Void, error)
	Update(context.Context, *Commander) (*Void, error)
	Delete(context.Context, *ById) (*Void, error)
	Get(context.Context, *ById) (*Commander, error)
	GetAll(context.Context, *CommanderReq) (*AllCommanders, error)
	mustEmbedUnimplementedCommanderServiceServer()
}

// UnimplementedCommanderServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCommanderServiceServer struct {
}

func (UnimplementedCommanderServiceServer) Create(context.Context, *CommanderReq) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCommanderServiceServer) Update(context.Context, *Commander) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedCommanderServiceServer) Delete(context.Context, *ById) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedCommanderServiceServer) Get(context.Context, *ById) (*Commander, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedCommanderServiceServer) GetAll(context.Context, *CommanderReq) (*AllCommanders, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedCommanderServiceServer) mustEmbedUnimplementedCommanderServiceServer() {}

// UnsafeCommanderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommanderServiceServer will
// result in compilation errors.
type UnsafeCommanderServiceServer interface {
	mustEmbedUnimplementedCommanderServiceServer()
}

func RegisterCommanderServiceServer(s grpc.ServiceRegistrar, srv CommanderServiceServer) {
	s.RegisterService(&CommanderService_ServiceDesc, srv)
}

func _CommanderService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommanderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommanderServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/commanders.CommanderService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommanderServiceServer).Create(ctx, req.(*CommanderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommanderService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Commander)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommanderServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/commanders.CommanderService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommanderServiceServer).Update(ctx, req.(*Commander))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommanderService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommanderServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/commanders.CommanderService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommanderServiceServer).Delete(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommanderService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommanderServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/commanders.CommanderService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommanderServiceServer).Get(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommanderService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommanderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommanderServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/commanders.CommanderService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommanderServiceServer).GetAll(ctx, req.(*CommanderReq))
	}
	return interceptor(ctx, in, info, handler)
}

// CommanderService_ServiceDesc is the grpc.ServiceDesc for CommanderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommanderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "commanders.CommanderService",
	HandlerType: (*CommanderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _CommanderService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _CommanderService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _CommanderService_Delete_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _CommanderService_Get_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _CommanderService_GetAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "commanders.proto",
}
