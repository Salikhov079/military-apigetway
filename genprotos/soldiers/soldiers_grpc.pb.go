// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: soldiers.proto

package soldiers

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SoldierService_Create_FullMethodName           = "/soldiers.SoldierService/Create"
	SoldierService_Update_FullMethodName           = "/soldiers.SoldierService/Update"
	SoldierService_Delete_FullMethodName           = "/soldiers.SoldierService/Delete"
	SoldierService_Get_FullMethodName              = "/soldiers.SoldierService/Get"
	SoldierService_GetAll_FullMethodName           = "/soldiers.SoldierService/GetAll"
	SoldierService_UseBullet_FullMethodName        = "/soldiers.SoldierService/UseBullet"
	SoldierService_UseFuel_FullMethodName          = "/soldiers.SoldierService/UseFuel"
	SoldierService_StatistikWeapons_FullMethodName = "/soldiers.SoldierService/StatistikWeapons"
	SoldierService_FuelStatistik_FullMethodName    = "/soldiers.SoldierService/FuelStatistik"
)

// SoldierServiceClient is the client API for SoldierService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SoldierServiceClient interface {
	Create(ctx context.Context, in *SoldierReq, opts ...grpc.CallOption) (*Void, error)
	Update(ctx context.Context, in *Soldier, opts ...grpc.CallOption) (*Void, error)
	Delete(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error)
	Get(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Soldier, error)
	GetAll(ctx context.Context, in *SoldierReq, opts ...grpc.CallOption) (*AllSoldiers, error)
	UseBullet(ctx context.Context, in *UseB, opts ...grpc.CallOption) (*Void, error)
	UseFuel(ctx context.Context, in *UseF, opts ...grpc.CallOption) (*Void, error)
	StatistikWeapons(ctx context.Context, in *GetSoldierStatistik, opts ...grpc.CallOption) (*GetSoldierStatistikRes, error)
	FuelStatistik(ctx context.Context, in *GetSoldierStatistikFuel, opts ...grpc.CallOption) (*GetSoldierStatistikFuelRes, error)
}

type soldierServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSoldierServiceClient(cc grpc.ClientConnInterface) SoldierServiceClient {
	return &soldierServiceClient{cc}
}

func (c *soldierServiceClient) Create(ctx context.Context, in *SoldierReq, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, SoldierService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *soldierServiceClient) Update(ctx context.Context, in *Soldier, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, SoldierService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *soldierServiceClient) Delete(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, SoldierService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *soldierServiceClient) Get(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Soldier, error) {
	out := new(Soldier)
	err := c.cc.Invoke(ctx, SoldierService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *soldierServiceClient) GetAll(ctx context.Context, in *SoldierReq, opts ...grpc.CallOption) (*AllSoldiers, error) {
	out := new(AllSoldiers)
	err := c.cc.Invoke(ctx, SoldierService_GetAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *soldierServiceClient) UseBullet(ctx context.Context, in *UseB, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, SoldierService_UseBullet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *soldierServiceClient) UseFuel(ctx context.Context, in *UseF, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, SoldierService_UseFuel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *soldierServiceClient) StatistikWeapons(ctx context.Context, in *GetSoldierStatistik, opts ...grpc.CallOption) (*GetSoldierStatistikRes, error) {
	out := new(GetSoldierStatistikRes)
	err := c.cc.Invoke(ctx, SoldierService_StatistikWeapons_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *soldierServiceClient) FuelStatistik(ctx context.Context, in *GetSoldierStatistikFuel, opts ...grpc.CallOption) (*GetSoldierStatistikFuelRes, error) {
	out := new(GetSoldierStatistikFuelRes)
	err := c.cc.Invoke(ctx, SoldierService_FuelStatistik_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SoldierServiceServer is the server API for SoldierService service.
// All implementations must embed UnimplementedSoldierServiceServer
// for forward compatibility
type SoldierServiceServer interface {
	Create(context.Context, *SoldierReq) (*Void, error)
	Update(context.Context, *Soldier) (*Void, error)
	Delete(context.Context, *ById) (*Void, error)
	Get(context.Context, *ById) (*Soldier, error)
	GetAll(context.Context, *SoldierReq) (*AllSoldiers, error)
	UseBullet(context.Context, *UseB) (*Void, error)
	UseFuel(context.Context, *UseF) (*Void, error)
	StatistikWeapons(context.Context, *GetSoldierStatistik) (*GetSoldierStatistikRes, error)
	FuelStatistik(context.Context, *GetSoldierStatistikFuel) (*GetSoldierStatistikFuelRes, error)
	mustEmbedUnimplementedSoldierServiceServer()
}

// UnimplementedSoldierServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSoldierServiceServer struct {
}

func (UnimplementedSoldierServiceServer) Create(context.Context, *SoldierReq) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedSoldierServiceServer) Update(context.Context, *Soldier) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedSoldierServiceServer) Delete(context.Context, *ById) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedSoldierServiceServer) Get(context.Context, *ById) (*Soldier, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedSoldierServiceServer) GetAll(context.Context, *SoldierReq) (*AllSoldiers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedSoldierServiceServer) UseBullet(context.Context, *UseB) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UseBullet not implemented")
}
func (UnimplementedSoldierServiceServer) UseFuel(context.Context, *UseF) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UseFuel not implemented")
}
func (UnimplementedSoldierServiceServer) StatistikWeapons(context.Context, *GetSoldierStatistik) (*GetSoldierStatistikRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatistikWeapons not implemented")
}
func (UnimplementedSoldierServiceServer) FuelStatistik(context.Context, *GetSoldierStatistikFuel) (*GetSoldierStatistikFuelRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FuelStatistik not implemented")
}
func (UnimplementedSoldierServiceServer) mustEmbedUnimplementedSoldierServiceServer() {}

// UnsafeSoldierServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SoldierServiceServer will
// result in compilation errors.
type UnsafeSoldierServiceServer interface {
	mustEmbedUnimplementedSoldierServiceServer()
}

func RegisterSoldierServiceServer(s grpc.ServiceRegistrar, srv SoldierServiceServer) {
	s.RegisterService(&SoldierService_ServiceDesc, srv)
}

func _SoldierService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SoldierReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoldierServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SoldierService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoldierServiceServer).Create(ctx, req.(*SoldierReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SoldierService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Soldier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoldierServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SoldierService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoldierServiceServer).Update(ctx, req.(*Soldier))
	}
	return interceptor(ctx, in, info, handler)
}

func _SoldierService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoldierServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SoldierService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoldierServiceServer).Delete(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _SoldierService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoldierServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SoldierService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoldierServiceServer).Get(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _SoldierService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SoldierReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoldierServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SoldierService_GetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoldierServiceServer).GetAll(ctx, req.(*SoldierReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SoldierService_UseBullet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UseB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoldierServiceServer).UseBullet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SoldierService_UseBullet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoldierServiceServer).UseBullet(ctx, req.(*UseB))
	}
	return interceptor(ctx, in, info, handler)
}

func _SoldierService_UseFuel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UseF)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoldierServiceServer).UseFuel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SoldierService_UseFuel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoldierServiceServer).UseFuel(ctx, req.(*UseF))
	}
	return interceptor(ctx, in, info, handler)
}

func _SoldierService_StatistikWeapons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSoldierStatistik)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoldierServiceServer).StatistikWeapons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SoldierService_StatistikWeapons_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoldierServiceServer).StatistikWeapons(ctx, req.(*GetSoldierStatistik))
	}
	return interceptor(ctx, in, info, handler)
}

func _SoldierService_FuelStatistik_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSoldierStatistikFuel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoldierServiceServer).FuelStatistik(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SoldierService_FuelStatistik_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoldierServiceServer).FuelStatistik(ctx, req.(*GetSoldierStatistikFuel))
	}
	return interceptor(ctx, in, info, handler)
}

// SoldierService_ServiceDesc is the grpc.ServiceDesc for SoldierService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SoldierService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "soldiers.SoldierService",
	HandlerType: (*SoldierServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _SoldierService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _SoldierService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _SoldierService_Delete_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _SoldierService_Get_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _SoldierService_GetAll_Handler,
		},
		{
			MethodName: "UseBullet",
			Handler:    _SoldierService_UseBullet_Handler,
		},
		{
			MethodName: "UseFuel",
			Handler:    _SoldierService_UseFuel_Handler,
		},
		{
			MethodName: "StatistikWeapons",
			Handler:    _SoldierService_StatistikWeapons_Handler,
		},
		{
			MethodName: "FuelStatistik",
			Handler:    _SoldierService_FuelStatistik_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "soldiers.proto",
}
